 bool isSafe(int row, int col, vector<string> &board, int n){
        int x = row;
        int y = col;
        // check row
        while(y >= 0){
            if(board[x][y] == 'Q')
                return false;
            y--;
        }
        x = row;
        y = col;
        // check diagonal
        while(x >= 0 && y >= 0){
            if(board[x][y] == 'Q')
                return false;
            y--;
            x--;
        }
        x = row;
        y = col;
        // check diagonal
        while(x < n && y >= 0){
            if(board[x][y] == 'Q')
                return false;
            y--;
            x++;
        }
        return true;
    }
    
    void solve(int col, vector<string> &board, vector<vector<string>> &ans,
    int n){
        // base case
        if(col == n){
            ans.push_back(board);
            return;
        }
        // solve 1 case rest recursion will take care
        for(int row = 0; row < n; row++){
            // is placing root is safe
            if(isSafe(row, col, board, n)){
                board[row][col] = 'Q';
                solve(col+1, board, ans, n);
                // backtracking
                board[row][col] = '.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
         vector < string > board(n);
         string s(n, '.');
         for (int i = 0; i < n; i++) {
          board[i] = s;
        }
        vector<vector<string>> ans;
        solve(0, board, ans, n);
        return ans;
    }
