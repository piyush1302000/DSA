class Solution {
public:
    
    bool isSafe(int row, int col, vector<vector<char>>& board, char val){
        int n = board.size();
        for(int i = 0; i < n; i++){
            // row check
            if(i != col && board[row][i] == val)
                return false;
            // col check
            if(i != row && board[i][col] == val)
                return false;
            // 3x3 matrix check
            if(row != 3*(row/3)+i/3 && col != 3*(col/3) + i%3 && board[3*(row/3) + i/3][3*(col/3) + i%3] == val)
                return false;
        }
        return true;
    }
    
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board[0].size();
        for(int row = 0; row < n; row++){
            for(int col = 0; col < n; col++){
                    if(board[row][col] != '.'){
                        if(!isSafe(row, col, board, board[row][col]))
                            return false;
                }
            }
        }
        return true;
    }
};
