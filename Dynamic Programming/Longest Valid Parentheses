int longestValidParentheses(string s) {
       int open = 0;
       int close = 0;
       int ans = 0;
       // 1 to n
       for(int i = 0; i < s.length(); i++){
           char ch = s[i];
           if(ch == '(')
           open++;
           else
           close++;
           if(open == close){ // valid parantheses
            int len = open + close;
            ans = max(ans, len);
           }
           else if(close > open)
           open = close = 0;
       }
       open = close = 0;
       // n to 1
       for(int i = s.length()-1; i >= 0; i--){
           char ch = s[i];
           if(ch == '(')
           open++;
           else
           close++;
           if(open == close){ // valid parantheses
            int len = open + close;
            ans = max(ans, len);
           }
           else if(open > close)
           open = close = 0;
       }
       return ans;
    }
