void heapify(vector<int> &ans, int size, int index){
        int largest = index;
        int left = 2 * index;
        int right = 2 * index + 1;
        if(left <= size && ans[largest] < ans[left])
            largest = left;
        if(right <= size && ans[largest] < ans[right])
            largest = right;
        if(largest != index){
            swap(ans[largest], ans[index]);
            heapify(ans, size, largest);
        }
    }
    
    void heapSort(vector<int> &ans, int size){
        while(size > 1){
            swap(ans[size], ans[1]);
            size--;
            heapify(ans, size, 1);
        }
    }
    
    vector<int> sortArray(vector<int>& nums) {
        priority_queue<int> pq;
        for(int i = 0; i < nums.size(); i++){
            pq.push(nums[i]);
        }
        vector<int> arr;
        arr.push_back(-1);
        while(!pq.empty()){
            arr.push_back(pq.top());
            pq.pop();
        }
        heapSort(arr, arr.size() - 1);
        arr.erase(arr.begin());
        return arr;
    }
