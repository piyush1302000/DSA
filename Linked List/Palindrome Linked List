ListNode* getMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head -> next;
        while(fast != NULL && fast -> next != NULL)
        {
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* forward = NULL;
        while(curr != NULL)
        {
            forward = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
     if(head == NULL || head -> next == NULL)
         return 1;
        // step 1: get the mid
        ListNode* mid = getMid(head);
        ListNode* temp = mid -> next;
        // step 2: reverse list after mid
        mid -> next = reverse(temp);
        // step 4: compare both halves
        ListNode* head1 = head;
        ListNode* head2 = mid -> next;
        while(head2 != NULL)
        {
            if(head1 -> val != head2 -> val)
                return 0;
            head1 = head1 -> next;
            head2 = head2 -> next;
        }
        return 1;
    }  
